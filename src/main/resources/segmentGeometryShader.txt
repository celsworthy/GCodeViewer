#version 150
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 compositeMatrix;
uniform vec3 lightPosition;

in vec4 vColour[]; // Output from vertex shader for each vertex
in vec4 vNormal[];

out vec4 fColour; // Output to fragment shader
out vec3 fNormal;
out vec3 lNormal;

void main()
{
	// Discard triangle if all vertex colours are transparent.
	if (vColour[0].a > 0.01 || vColour[1].a > 0.01 || vColour[2].a > 0.01)
	{
		// Pass on triangle.
		fColour = vColour[0];
		fNormal = vNormal[0].xyz;
		lNormal = normalize(lightPosition - gl_in[0].gl_Position).xyz;
		gl_Position = compositeMatrix * gl_in[0].gl_Position;
		EmitVertex();
		fColour = vColour[1];
		fNormal = vNormal[1].xyz;
		lNormal = normalize(lightPosition - gl_in[1].gl_Position).xyz;
		gl_Position = compositeMatrix * gl_in[1].gl_Position;
		EmitVertex();
		fColour = vColour[2];
		fNormal = vNormal[2].xyz;
		lNormal = normalize(lightPosition - gl_in[2].gl_Position).xyz;
		gl_Position = compositeMatrix * gl_in[2].gl_Position;
		EmitVertex();
		EndPrimitive();
	}
}