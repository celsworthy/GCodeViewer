#version 400 core
layout(points) in;
layout(triangle_strip, max_vertices = 24) out;

uniform mat4 compositeMatrix;
uniform vec3 lightPosition;

in vec4 vColour[]; // Output from vertex shader for each vertex
in vec4 vNormal[];
in vec4 vDirection[];

out vec4 fColour; // Output to fragment shader
out vec3 fNormal;
out vec3 lNormal;

void main()
{
	// Expand each point to a triangular segment
	// - like a chunk of Toblerone, but sadly not
	// made of chocolate.
	fColour = vColour[0]; // Point has only one vertex
	if (fColour.a > 0.01)
	{
		vec3 d = vDirection[0].xyz;
		vec3 n = vNormal[0].xyz;
		vec3 n3 = cross(n, d); // bi-normal.
		n3 = normalize(n3);
		
		vec3 n1 = normalize(-0.288675 * n3 - 0.5 * n);
		vec3 n2 = normalize(-0.288675 * n3 + 0.5 * n);

		// The w component of the direction is the length of the segment.
		// The w component of the normal is the width of the segment.
		d = 0.5 * vDirection[0].w * d;
		float wscale = 0.57735 * vNormal[0].w;
		
		vec4 p = gl_in[0].gl_Position;
		vec4 d4 = vec4(d, 0.0);
	
		vec4 p1 = (p + wscale * vec4(n1, 0.0));
		vec4 p2 = (p + wscale * vec4(n2, 0.0));
		vec4 p3 = (p + wscale * vec4(n3, 0.0));
		vec4 p4 = compositeMatrix * (p2 + d4);
		vec4 p5 = compositeMatrix * (p1 + d4);
		vec4 p6 = compositeMatrix * (p3 + d4);
		p1 = compositeMatrix * (p1 - d4);
		p2 = compositeMatrix * (p2 - d4);
		p3 = compositeMatrix * (p3 - d4);
		
		lNormal = normalize(lightPosition - p.xyz);

		// End triangle.
		fNormal = -d;		
		gl_Position = p1;
		EmitVertex();
		gl_Position = p2;
		EmitVertex();
		gl_Position = p3;
		EmitVertex();
		EndPrimitive();

		// Side triangle 1.
		fNormal = n1;
		gl_Position = p1;
		EmitVertex();
		fNormal = n3;
		gl_Position = p6;
		EmitVertex();
		fNormal = n1;
		gl_Position = p5;
		EmitVertex();
		EndPrimitive();

		// Side triangle 2.
		fNormal = n1;
		gl_Position = p1;
		EmitVertex();
		fNormal = n3;
		gl_Position = p3;
		EmitVertex();
		fNormal = n3;
		gl_Position = p6;
		EmitVertex();
		EndPrimitive();

		// Side triangle 3.
		fNormal = n3;
		gl_Position = p3;
		EmitVertex();
		fNormal = n2;
		gl_Position = p4;
		EmitVertex();
		fNormal = n3;
		gl_Position = p6;
		EmitVertex();
		EndPrimitive();

		// Side triangle 4.
		fNormal = n3;
		gl_Position = p3;
		EmitVertex();
		fNormal = n2;
		gl_Position = p2;
		EmitVertex();
		fNormal = n2;
		gl_Position = p4;
		EmitVertex();
		EndPrimitive();
		
		// Side triangle 5.
		fNormal = n2;
		gl_Position = p2;
		EmitVertex();
		fNormal = n1;
		gl_Position = p5;
		EmitVertex();
		fNormal = n2;
		gl_Position = p4;
		EmitVertex();
		EndPrimitive();

		// Side triangle 6.
		fNormal = n2;
		gl_Position = p2;
		EmitVertex();
		fNormal = n1;
		gl_Position = p1;
		EmitVertex();
		fNormal = n1;
		gl_Position = p5;
		EmitVertex();
		EndPrimitive();
		
		// End triangle.
		fNormal = d;
		gl_Position = p4;
		EmitVertex();
		gl_Position = p5;
		EmitVertex();
		gl_Position = p6;
		EmitVertex();
		EndPrimitive();
	}
}