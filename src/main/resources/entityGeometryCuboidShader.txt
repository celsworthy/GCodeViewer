#version 400 core
layout(points) in;
layout(triangle_strip, max_vertices = 28) out;

uniform mat4 compositeMatrix;
uniform vec3 lightPosition;

in vec4 vColour[]; // Output from vertex shader for each vertex
in vec4 vNormal[];
in vec4 vDirection[];

out vec4 fColour; // Output to fragment shader
out vec3 fNormal;
out vec3 lNormal;

void main()
{
	fColour = vColour[0]; // Point has only one vertex
	if (fColour.a > 0.01)
	{
		vec3 d = vDirection[0].xyz;
		vec3 n = vNormal[0].xyz;
		vec3 bn = cross(d, n);
		bn = normalize(bn);
		d = 0.5 * vDirection[0].w * d;
		n = 0.5 * vNormal[0].w * n;
		bn = 0.5 * vNormal[0].w * bn;
		
		vec4 p = gl_in[0].gl_Position;
		vec4 d4 = vec4(d, 0.0);
		vec4 n4 = vec4(n, 0.0);
		vec4 bn4 = vec4(bn, 0.0);
		vec4 p1 = compositeMatrix * (p - d4 - n4 - bn4);
		vec4 p2 = compositeMatrix * (p - d4 - n4 + bn4);
		vec4 p3 = compositeMatrix * (p - d4 + n4 - bn4);
		vec4 p4 = compositeMatrix * (p - d4 + n4 + bn4);
		vec4 p5 = compositeMatrix * (p + d4 - n4 - bn4);
		vec4 p6 = compositeMatrix * (p + d4 - n4 + bn4);
		vec4 p7 = compositeMatrix * (p + d4 + n4 - bn4);
		vec4 p8 = compositeMatrix * (p + d4 + n4 + bn4);
		
		lNormal = normalize(lightPosition - p.xyz);

		fNormal = -d;
		gl_Position = p2;
		EmitVertex();
		gl_Position = p3;
		EmitVertex();
		gl_Position = p1;
		EmitVertex();
		EndPrimitive();

		fNormal = -d;
		gl_Position = p2;
		EmitVertex();
		gl_Position = p4;
		EmitVertex();
		gl_Position = p3;
		EmitVertex();
		EndPrimitive();

		fNormal = -bn;
		gl_Position = p1;
		EmitVertex();
		gl_Position = p7;
		EmitVertex();
		gl_Position = p5;
		EmitVertex();
		EndPrimitive();

		fNormal = -bn;
		gl_Position = p1;
		EmitVertex();
		gl_Position = p3;
		EmitVertex();
		gl_Position = p7;
		EmitVertex();
		EndPrimitive();

		fNormal = n;
		gl_Position = p3;
		EmitVertex();
		gl_Position = p8;
		EmitVertex();
		gl_Position = p7;
		EmitVertex();
		EndPrimitive();

		fNormal = n;
		gl_Position = p3;
		EmitVertex();
		gl_Position = p4;
		EmitVertex();
		gl_Position = p8;
		EmitVertex();
		EndPrimitive();
		
		fNormal = bn;
		gl_Position = p4;
		EmitVertex();
		gl_Position = p6;
		EmitVertex();
		gl_Position = p8;
		EmitVertex();
		EndPrimitive();

		fNormal = bn;
		gl_Position = p4;
		EmitVertex();
		gl_Position = p2;
		EmitVertex();
		gl_Position = p6;
		EmitVertex();
		EndPrimitive();
		
		fNormal = -n;
		gl_Position = p2;
		EmitVertex();
		gl_Position = p5;
		EmitVertex();
		gl_Position = p6;
		EmitVertex();
		EndPrimitive();

		fNormal = -n;
		gl_Position = p2;
		EmitVertex();
		gl_Position = p1;
		EmitVertex();
		gl_Position = p5;
		EmitVertex();
		EndPrimitive();

		fNormal = d;
		gl_Position = p5;
		EmitVertex();
		gl_Position = p8;
		EmitVertex();
		gl_Position = p7;
		EmitVertex();
		EndPrimitive();

		fNormal = d;
		gl_Position = p5;
		EmitVertex();
		gl_Position = p6;
		EmitVertex();
		gl_Position = p8;
		EmitVertex();
		EndPrimitive();
	}
}